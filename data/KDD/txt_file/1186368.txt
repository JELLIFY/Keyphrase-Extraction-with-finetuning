gplag : detection of software plagiarism by program dependence graph analysis along with the blossom of open source projects comes the convenience for software plagiarism . a company , if less self-disciplined , may be tempted to plagiarize some open source projects for its own products . although current plagiarism detection tools appear sufficient for academic use , they are nevertheless short for fighting against serious plagiarists . for example , disguises like statement reordering and code insertion can effectively confuse these tools . in this paper , we develop a new plagiarism detection tool , called gplag , which detects plagiarism by mining program dependence graphs ( pdgs ) . a pdg is a graphic representation of the data and control dependencies within a procedure . because pdgs are nearly invariant during plagiarism , gplag is more effective than state-of-the-art tools for plagiarism detection . in order to make gplag scalable to large programs , a statistical lossy filter is proposed to prune the plagiarism search space . experiment study shows that gplag is both effective and efficient : it detects plagiarism that easily slips over existing tools , and it usually takes a few seconds to find ( simulated ) plagiarism in programs having thousands of lines of code .