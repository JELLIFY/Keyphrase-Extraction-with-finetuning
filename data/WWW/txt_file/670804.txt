dynamic personalized pagerank in entity-relation graphs extractors and taggers turn unstructured text into entity-relation ( er ) graphs where nodes are entities ( email , paper , person , conference , company ) and edges are relations ( wrote , cited,works-for ) . typed proximity search of the form ( b ) type = personnear company ~ `` ibm '' , paper ~ `` xml '' ( \/ b ) is an increasingly usefulsearch paradigm in er graphs . proximity search implementations either perform a pagerank-like computation at query time , which is slow , or precompute , store and combine per-word pageranks , which can be very expensive in terms of preprocessing time and space . we present hubrank , a new system for fast , dynamic , space-efficient proximity searches in er graphs . during preprocessing , hubrank computesand indexes certain `` sketchy '' random walk fingerprints for a small fraction of nodes , carefully chosen using query log statistics . at query time , a small `` active '' subgraph is identified , bordered bynodes with indexed fingerprints . these fingerprints are adaptively loaded to various resolutions to form approximate personalized pagerank vectors ( ppvs ) . ppvs at remaining active nodes are now computed iteratively . we report on experiments with citeseer 's er graph and millions of real cite seer queries . some representative numbers follow . on our testbed , hubrank preprocesses and indexes 52 times faster than whole-vocabulary ppv computation . a text index occupies 56 mb . whole-vocabulary ppvs would consume 102gb . if ppvs are truncated to 56 mb , precision compared to true pagerank drops to 0.55 ; incontrast , hubrank has precision 0.91 at 63mb . hubrank 's average querytime is 200-300 milliseconds ; query-time pagerank computation takes 11 seconds on average . 