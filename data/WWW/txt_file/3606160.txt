executing incoherency bounded continuous queries at web data aggregators continuous queries are used to monitor changes to time varying data and to provide results useful for online decision making . typically a user desires to obtain the value of some function over distributed data items , for example , to determine when and whether ( a ) the traffic entering a highway from multiple feed roads will result in congestion in a thoroughfare or ( b ) the value of a stock portfolio exceeds a threshold . using the standard web infrastructure for these applications will increase the reach of the underlying information . but , since these queries involve data from multiple sources , with sources supporting standard http ( pull-based ) interfaces , special query processing techniques are needed . also , these applications often have the flexibility to tolerate some incoherency , i.e. , some differences between the results reported to the user and that produced from the virtual database made up of the distributed data sources . in this paper , we develop and evaluate client-pull-based techniques for refreshing data so that the results of the queries over distributed data can be correctly reported , conforming to the limited incoherency acceptable to the users . we model as well as estimate the dynamics of the data items using a probabilistic approach based on markov chains . depending on the dynamics of data we adapt the data refresh times to deliver query results with the desired coherency . the commonality of data needs of multiple queries is exploited to further reduce refresh overheads . effectiveness of our approach is demonstrated using live sources of dynamic data : the number of refreshes it requires is ( a ) an order of magnitude less than what we would need if every potential update is pulled from the sources , and ( b ) comparable to the number of messages needed by an ideal algorithm , one that knows how to optimally refresh the data from distributed data sources . our evaluations also bring out a very practical and attractive tradeoff property of pull based approaches , e.g. , a small increase in tolerable incoherency leads to a large decrease in message overheads . 