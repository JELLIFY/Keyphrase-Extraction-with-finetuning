securing web application code by static analysis and runtime protection security remains a major roadblock to universal acceptance of the web for many kinds of transactions , especially since the recent sharp increase in remotely exploitable vulnerabilities have been attributed to web application bugs . many verification tools are discovering previously unknown vulnerabilities in legacy c programs , raising hopes that the same success can be achieved with web applications . in this paper , we describe a sound and holistic approach to ensuring web application security . viewing web application vulnerabilities as a secure information flow problem , we created a lattice-based static analysis algorithm derived from type systems and typestate , and addressed its soundness . during the analysis , sections of code considered vulnerable are instrumented with runtime guards , thus securing web applications in the absence of user intervention . with sufficient annotations , runtime overhead can be reduced to zero . we also created a tool named . webssari ( web application security by static analysis and runtime inspection ) to test our algorithm , and used it to verify 230 open-source web application projects on sourceforge.net , which were selected to represent projects of different maturity , popularity , and scale . 69 contained vulnerabilities . after notifying the developers , 38 acknowledged our findings and stated their plans to provide patches . our statistics also show that static analysis reduced potential runtime overhead by 98.4 % . 