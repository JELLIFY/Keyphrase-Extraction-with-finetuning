huskysim : a simulation toolkit for application scheduling in computational grids grid computing -- the assemblage of heterogeneous distributed clusters of computers viewed as a single virtual machine -- promises to serve as the next major paradigm in distributed computing . since grids are assemblages of ( usually ) autonomous systems ( autonomous clusters , supercomputers , or even single workstations ) scheduling can become a complex affair which must take into consideration not just the requirements ( and scheduling decisions ) made at the point of the job 's origin , but also the scheduling requirements ( and decisions ) made at remote points on the fabric , and in particular scheduling decisions made by a remote autonomous system onto which the local job has been scheduled . the current existing scheduling models range from static , where each of the programs is assigned once to a processor before execution of the program commences , to dynamic , where a program may be reassigned to different processors , or a hybrid approach , which combines characteristics of both techniques ( 1,4,5 ) . to address this issue , we have developed a java based discrete event grid simulator toolkit called huskysim . the huskysim toolkit provides core functionalities ( e.g. , compute objects , network objects , and scheduling objects ) that can be used to simulate a distributed computing environment . furthermore , it can be used to predict the performance of various classes of grid scheduling algorithms including : static scheduling algorithms , dynamic scheduling , adaptive scheduling . in our design , we adopted an object-oriented design , which allows an easy mapping and integration of simulation objects into the simulation program . this approach simplifies the simulation of multitasking , and distributed data processing model . our model of multitasking processing is based on an interrupt driven mechanism . as shown in figure 1 , the simulator works by relaying messages between the core engine and the simulation modules through the message handling sub-system . once the architecture , the load distribution , and the scheduling algorithms are defined , the object registration subsystem sends a new object request message to the object class libraries and builds a skeleton for the requested simulation experiment . workloads traces can be generated using probabilistic models . the currently supported distributions are : uniform , poisson , exponential , normal , erlang , and power tailed . it is also possible to use real world load traces . moreover , we augmented the simulator with a statistical module . using the statistical module provided with the huskysim , the core simulation engine can send messages to perform various type of analysis on the performance data including : variance reduction , regression , time series analysis , clustering , and data mining . in order to quantify the system performance , the simulator provides various performance metrics including : cpu utilization , disk utilization , application turnaround time , latency , make span , host to host bandwidth , jammed bandwidth , and tcp\/ip traffic data . these measurements are handled through the measurement sub-system . furthermore , the huskysim can be used to simulate the classes of algorithmic and parametric adaptive grid schedulers . in which , the scheduling algorithm may not be fixed in advance . simply , the scheduling algorithm is selected at run time based on the current workload on the grid fabric in order to operate at near optimal level . 