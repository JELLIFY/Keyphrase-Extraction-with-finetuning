improving portlet interoperability through deep annotation portlets ( i.e. multi-step , user-facing applications to be syndicated within a portal ) are currently supported by most portal frameworks . however , there is not yet a definitive answer to portlet interoperation whereby data flows smoothly from one portlet to a neighbouring one . both data-based and api-based approaches exhibit some drawbacks in either the limitation of the sharing scope or the standardization effort required . we argue that these limitations can be overcome by using deep annotation techniques . by providing additional markup about the background services , deep annotation strives to interact with these underlying services rather than with the html surface that conveys the markup . in this way , the portlet producer can extend a portlet markup , a fragment , with data about the processes whose rendering this fragment supports . then , the portlet consumer ( e.g. a portal ) can use deep annotation to map an output process in fragment a to an input process in fragment b. this mapping results in fragment b having its input form ( or other `` input '' widget ) filled up . we consider deep annotation as particularly valid for portlet interoperation due to the controlled and cooperative environment that characterizes the portal setting . 