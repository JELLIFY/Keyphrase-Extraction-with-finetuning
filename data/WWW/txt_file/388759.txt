a search engine for natural language applications many modern natural language-processing applications utilize search engines to locate large numbers of web documents or to compute statistics over the web corpus . yet web search engines are designed and optimized for simple human queries -- they are not well suited to support such applications . as a result , these applications are forced to issue millions of successive queries resulting in unnecessary search engine load and in slow applications with limited scalability . in response , this paper introduces the bindings engine ( be ) , which supports queries containing typed variables and string-processing functions . for example , in response to the query `` powerful ` noun ' '' be will return all the nouns in its index that immediately follow the word `` powerful '' , sorted by frequency . in response to the query `` cities such as propernoun ( head ( ` nounphrase ' ) ) '' , be will return a list of proper nouns likely to be city names . be 's novel neighborhood index enables it to do so with o ( k ) random disk seeks and o ( k ) serial disk reads , where k is the number of non-variable terms in its query . as a result , be can yield several orders of magnitude speedup for large-scale language-processing applications . the main cost is a modest increase in space to store the index . we report on experiments validating these claims , and analyze how be 's space-time tradeoff scales with the size of its index and the number of variable types . finally , we describe how a be-based application extracts thousands of facts from the web at interactive speeds in response to simple user queries . 