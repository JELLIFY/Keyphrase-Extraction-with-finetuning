prophiler : a fast filter for the large-scale detection of malicious web pages malicious web pages that host drive-by-download exploits have become a popular means for compromising hosts on the internet and , subsequently , for creating large-scale botnets . in a drive-by-download exploit , an attacker embeds a malicious script ( typically written in javascript ) into a web page . when a victim visits this page , the script is executed and attempts to compromise the browser or one of its plugins . to detect drive-by-download exploits , researchers have developed a number of systems that analyze web pages for the presence of malicious code . most of these systems use dynamic analysis . that is , they run the scripts associated with a web page either directly in a real browser ( running in a virtualized environment ) or in an emulated browser , and they monitor the scripts ' executions for malicious activity . while the tools are quite precise , the analysis process is costly , often requiring in the order of tens of seconds for a single page . therefore , performing this analysis on a large set of web pages containing hundreds of millions of samples can be prohibitive . one approach to reduce the resources required for performing large-scale analysis of malicious web pages is to develop a fast and reliable filter that can quickly discard pages that are benign , forwarding to the costly analysis tools only the pages that are likely to contain malicious code . in this paper , we describe the design and implementation of such a filter . our filter , called prophiler , uses static analysis techniques to quickly examine a web page for malicious content . this analysis takes into account features derived from the html contents of a page , from the associated javascript code , and from the corresponding url . we automatically derive detection models that use these features using machine-learning techniques applied to labeled datasets . to demonstrate the effectiveness and efficiency of prophiler , we crawled and collected millions of pages , which we analyzed for malicious behavior . our results show that our filter is able to reduce the load on a more costly dynamic analysis tools by more than 85 % , with a negligible amount of missed malicious pages . 