fast nearest-neighbor search in disk-resident graphs link prediction , personalized graph search , fraud detection , and many such graph mining problems revolve around the computation of the most `` similar '' k nodes to a given query node . one widely used class of similarity measures is based on random walks on graphs , e.g. , personalized pagerank , hitting and commute times , and simrank . there are two fundamental problems associated with these measures . first , existing online algorithms typically examine the local neighborhood of the query node which can become significantly slower whenever high-degree nodes are encountered ( a common phenomenon in real-world graphs ) . we prove that turning high degree nodes into sinks results in only a small approximation error , while greatly improving running times . the second problem is that of computing similarities at query time when the graph is too large to be memory-resident . the obvious solution is to split the graph into clusters of nodes and store each cluster on a disk page ; ideally random walks will rarely cross cluster boundaries and cause page-faults . our contributions here are twofold : ( a ) we present an efficient deterministic algorithm to find the k closest neighbors ( in terms of personalized pagerank ) of any query node in such a clustered graph , and ( b ) we develop a clustering algorithm ( rwdisk ) that uses only sequential sweeps over data files . empirical results on several large publicly available graphs like dblp , citeseer and live-journal ( ~ 90 m edges ) demonstrate that turning high degree nodes into sinks not only improves running time of rwdisk by a factor of 3 but also boosts link prediction accuracy by a factor of 4 on average . we also show that rwdisk returns more desirable ( high conductance and small size ) clusters than the popular clustering algorithm metis , while requiring much less memory . finally our deterministic algorithm for computing nearest neighbors incurs far fewer page-faults ( factor of 5 ) than actually simulating random walks .