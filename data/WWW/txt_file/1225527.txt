compressing and searching xml data via two zips xml is fast becoming the standard format to store , exchange and publish over the web , and is getting embedded in applications . two challenges in handling xml are its size ( the xml representation of a document is significantly larger than its native state ) and the complexity of its search ( xml search involves path and content searches on labeled tree structures ) . we address the basic problems of compression , navigation and searching of xml documents . in particular , we adopt recently proposed theoretical algorithms ( 11 ) for succinct tree representations to design and implement a compressed index for xml , called xbzipindex , in which the xml document is maintained in a highly compressed format , and both navigation and searching can be done uncompressing only a tiny fraction of the data . this solution relies on compressing and indexing two arrays derived from the xml data . with detailed experiments we compare this with other compressed xml indexing and searching engines to show that xbzipindex has compression ratio up to 35 % better than the ones achievable by those other tools , and its time performance on some path and content search operations is order of magnitudes faster : few milliseconds over hundreds of mbs of xml files versus tens of seconds , on standard xml data sources . 